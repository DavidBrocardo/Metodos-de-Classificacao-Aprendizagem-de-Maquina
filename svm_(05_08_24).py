# -*- coding: utf-8 -*-
"""SVM (05/08/24).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vlMUtB7B4RUZQzOyq_6kFDIi-SstkegZ

**Importando bibliotecas**
"""

import pandas as pd
import sklearn as sk
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.svm import SVC

"""**Carregando conjunto de dados**"""

dados = pd.read_csv("ObesityDataSet_Alterada.csv")
dados = shuffle(dados)
X = dados.iloc[:,:-1]
Y = dados.iloc[:,-1]

"""**Gerando os conjuntos de treino, teste e validação**

"""

x_treino,x_temp,y_treino,y_temp=train_test_split(X,Y,test_size=0.5,stratify=Y)
x_validacao,x_teste,y_validacao,y_teste=train_test_split(x_temp,y_temp,test_size=0.5, stratify = y_temp)

print("Treino")
x_treino.info()
y_treino.info()

print("\nValidação")
x_validacao.info()
y_validacao.info()

print("\nTeste")
x_teste.info()
y_teste.info()

"""

Começando a usar uma Árvore de Decisão
**negrito**"""

#sem setar valores aos hiperparâmetros
SVM = SVC()
SVM.fit(x_treino,y_treino)
opiniao = SVM.predict(x_teste)
print("Acurácia com parâmetros default: ",accuracy_score(y_teste, opiniao))

#atribuindo valores aos hiperparâmetros
#n_neighbors corresponde ao tamanho da vizinhança
#weights indica se os vizinhos terão pesos diferentes ou não. Pode assumir os valores uniform ou distante (ou callabe)

SVM = SVC(kernel='rbf',C=0.9)
SVM.fit(x_treino,y_treino)
opiniao = SVM.predict(x_teste)
print("Acurácia com parâmetros default: ",accuracy_score(y_teste, opiniao))

#testando todos as possibilidades em um conjunto finito de possibilidades de parâmetros
maior = -1
for k in ("linear", "poly", "rbf", "sigmoid"):  #kernel
  for i in (0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0):  #custo
    SVM = SVC(kernel=k,C=i)
    SVM.fit(x_treino,y_treino)
    opiniao = SVM.predict(x_validacao)
    Acc = accuracy_score(y_validacao, opiniao)
    print("Kernel: ",k," C: ",i," Acc: ",Acc)
    if (Acc > maior):
      maior = Acc
      ker = k
      custo = i

print("\nMelhor configuração para o SVM")
print("Kernel: ",ker," C: ",custo)

print("\n\nDesempenho sobre o conjunto de teste")
SVM = SVC(kernel=ker,C=custo)
SVM.fit(x_treino,y_treino)
opiniao = SVM.predict(x_teste)
print("Acurácia sobre o teste: ",accuracy_score(y_teste, opiniao))